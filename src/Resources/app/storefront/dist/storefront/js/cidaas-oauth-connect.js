"use strict"; (self.webpackChunk = self.webpackChunk || []).push([["cidaas-oauth-connect"], { 2065: (e, t, i) => { var s, n, a, o = i(6285), r = i(3206), l = i(8254), d = i(1110); class c extends o.Z { init() { this.client = new l.Z, this.email = null, this.password = null, this.nextButton = r.Z.querySelector(document, "#nextButton"), this.nextLoadingThingy = new d.Z(this.nextButton), this.nextButton.addEventListener("click", (e => { null === this.email ? (this.email = document.querySelector("#email").value, this.nextLoadingThingy.create(), this.client.post(this.options.cidaas + "/users-srv/user/checkexists/" + this.options.requestId, JSON.stringify({ email: this.email, requestId: this.options.requestId }), (e => { if (e) { JSON.parse(e).success ? this.client.post("/cidaas/exists", JSON.stringify({ email: this.email }), (e => { let t = JSON.parse(e); t.exists && this.client.get("/cidaas/lastlogin/" + t.id, (e => { null !== JSON.parse(e).lastLogin ? (document.querySelector("#emailContainer").style.display = "none", document.querySelector("#passwordContainer").style.display = "block", document.querySelector("#nextButton").textContent = "Login", this.nextLoadingThingy.remove(), document.querySelector("#password").focus()) : (document.querySelector("#emailContainer").style.display = "none", document.querySelector("#onetimePassword").style.display = "block", this.nextLoadingThingy.remove(), document.querySelector("#nextButton").style.display = "none", document.querySelector("#toOtpLink").setAttribute("href", this.options.cidaas + "/identity/login/initiate?userIdHint=" + encodeURI(this.email) + "&requestId=" + this.options.requestId + "&type=email")) })) })) : (document.querySelector("#emailContainer").style.display = "none", document.querySelector("#nextButton").style.display = "none", this.nextLoadingThingy.remove(), document.querySelector("#complete").style.display = "block") } else window.location.href = "/cidaas/register?userIdHint=" + this.email + "&type=email" }))) : null === this.password && (this.password = document.querySelector("#password").value, document.querySelector("#loginForm").setAttribute("action", "https://my-test.mainz05.de/login-srv/login"), document.querySelector("#loginForm").dispatchEvent(new Event("submit"))) })) } handleFormResponse(e) { } } s = c, a = {}, (n = function (e) { var t = function (e, t) { if ("object" != typeof e || null === e) return e; var i = e[Symbol.toPrimitive]; if (void 0 !== i) { var s = i.call(e, t || "default"); if ("object" != typeof s) return s; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === t ? String : Number)(e) }(e, "string"); return "symbol" == typeof t ? t : String(t) }(n = "options")) in s ? Object.defineProperty(s, n, { value: a, enumerable: !0, configurable: !0, writable: !0 }) : s[n] = a; var u = i(4690); class h { constructor(e) { this.init(e) } init(e) { this.client = new l.Z, this.url = e, this.scope = "openid email profile", this.cidaasUris = { generateRequest: "/authz-srv/authrequest/authz/generate", login: "/login-srv/login", changePassword: "/users-srv/changepassword", logout: "/session/end_session", token: "/token-srv/token", emailAuth: "/identity/login/initiate" } } getRequest(e) { return new Promise(((t, i) => { this.checkRequestData(e) || i("invalid object"), this.client.post(this.url + this.cidaasUris.generateRequest, JSON.stringify(e), (e => { t(JSON.parse(e)) })) })) } getScope() { return this.scope } checkRequestData(e) { let t = Object.keys(e), i = !0; return ["client_id", "redirect_uri", "response_type", "scope", "state"].forEach((s => { (t.indexOf(s) < 0 || "" + e[s].length < 1) && (i = !1) })), i } getEmailAuthUri(e, t) { return "" + this.url + this.cidaasUris.emailAuth + "?userIdHint=" + t + "&requestId=" + e + "&type=email" } emailExists(e, t) { return new Promise((i => { this.client.post(this.url + "/users-srv/user/checkexists/" + t, JSON.stringify({ email: e, requestId: t }), (e => { try { let t = JSON.parse(e); if (t) return i(t) } catch (e) { return i({ exists: !1 }) } return i({ exists: !1 }) })) })) } changePassword(e, t, i, s) { return new Promise(((n, a) => { this.client.post(this.url + "/users-srv/changepassword", JSON.stringify({ new_password: t, old_password: e, confirm_password: i, identityId: s }), (e => { try { let t = JSON.parse(e); n(t) } catch (e) { a(e) } })) })) } } class m extends o.Z { init() { this.infoShown = !1, this.emailAuth = !1, this.client = new l.Z, this.cidaas = new h(this.options.cidaasUrl), this.clientId = this.options.clientId, this.nextButton = r.Z.querySelector(document, "#weiterButton"), this.requestId = "", this.redirectUrl = this.options.redirectUrl, this.nextLoadingThingy = new d.Z(this.nextButton), document.getElementById("devButton").addEventListener("click", (async () => { let e = { client_id: this.clientId, redirect_uri: this.redirectUrl, response_type: "code", scope: this.cidaas.getScope(), nonce: (new Date).getTime() }, t = (this.cidaas.checkRequestData(e), await this.cidaas.getRequest(e)); this.requestId = t.data.requestId })), document.getElementById("infoForm").addEventListener("submit", (e => { e.preventDefault(), this.nextLoadingThingy.create(), this.email = document.getElementById("emailInput").value; let t = this.email.replaceAll("+", "%2B"); if (this.infoShown) if (this.emailAuth) { this.cidaas.getEmailAuthUri(this.requestId, this.email); window.location.href = "/cidaas/login?redirect_login=email&email=" + t + "&requestId=" + this.requestId } else this.infoShown = !1, document.getElementById("emailContainer").style.display = "block", document.getElementById("infoContainer").style.display = "none", this.nextLoadingThingy.remove(); else this.client.post("/cidaas/exists", JSON.stringify({ email: this.email }), this.handleExistsData.bind(this)) })) } async handleExistsData(e) { const t = JSON.parse(e); let i = { client_id: this.clientId, redirect_uri: this.redirectUrl, response_type: "code", scope: this.cidaas.getScope(), nonce: (new Date).getTime(), state: this.options.state }, s = await this.cidaas.getRequest(i); this.requestId = s.data.requestId; let n = this.email.replaceAll("+", "%2B"); if (t.exists) null === t.lastLogin ? (this.nextLoadingThingy.remove(), document.getElementById("emailContainer").style.display = "none", document.getElementById("buttonContainer").style.display = "none", document.getElementById("infoContainer").style.display = "block", document.getElementById("notYet").addEventListener("click", (e => { window.location.href = this.options.cidaasUrl + "/identity/password_forgot_init?userIdHint=" + n + "&requestId=" + this.requestId + "&type=email&redirect_to=" + this.redirectUrl })), document.getElementById("already").addEventListener("click", (e => { window.location.href = "/cidaas/login?redirect_login=email&email=" + n + "&requestId=" + this.requestId }))) : window.location.href = "/cidaas/login?redirect_login=email&email=" + n + "&requestId=" + this.requestId; else { (await this.cidaas.emailExists(this.email, this.requestId)).success ? window.location.href = "/cidaas/login?redirect_login=email&email=" + n + "&requestId=" + this.requestId : window.location.href = "/cidaas/register?userIdHint=" + n + "&type=email" } } } class y extends o.Z { init() { this.client = new l.Z; document.getElementById("emailForm").addEventListener("submit", this.handleSubmit.bind(this)), this.mailContainer = r.Z.querySelector(document, "div#accountMailContainer") } sleep(e) { return new Promise((t => { setTimeout(t, e) })) } handleSubmit(e) { e.preventDefault(); let t = document.getElementById("personalMail").value, i = document.getElementById("personalMailConfirmation").value; t === i ? (document.getElementById("personalMailConfirmation").classList.remove("is-invalid"), document.getElementById("invalidFeedback").style.display = "none", this.changeEmail(t, i)) : (document.getElementById("invalidFeedback").style.display = "block", document.getElementById("personalMailConfirmation").classList.add("is-invalid")) } async changeEmail(e, t) { this.email = e, document.getElementById("emailForm").style.display = "none", document.getElementById("emailVerifySpan").textContent = e, document.getElementById("verifyThing").style.display = "block", document.getElementById("verifyButton").addEventListener("click", this.handleVerify.bind(this)) } handleVerify() { u.Z.create(this.mailContainer), this.client.post("/cidaas/emailform", JSON.stringify({ email: this.email }), (e => { u.Z.remove(this.mailContainer), document.getElementById("verifyThing").style.display = "none", window.location.href = "/account" })) } } class g extends o.Z { init() { document.getElementById("profilePasswordForm").addEventListener("submit", this.handleFormSubmit.bind(this)), this.newPasswordInput = document.getElementById("newPassword"), this.confirmPasswordInput = document.getElementById("passwordConfirmation"), this.oldPasswordInput = document.getElementById("password"), this.client = new l.Z, this.client.get("/cidaas/url", (e => { try { const t = JSON.parse(e); this.cidaasUrl = t.url, this.cidaas = new h(t.url) } catch (t) { console.log(t, e) } })), this.client.post("/cidaas/generate", {}, (e => { const t = JSON.parse(e); this.clientId = t.clientId, this.url = t.url, this.state = t.state, this.scope = "openid email profile" })) } async handleFormSubmit(e) { e.preventDefault(), this.checkInputFields() && this.client.post("/cidaas/changepassword", JSON.stringify({ newPassword: this.newPasswordInput.value, oldPassword: this.oldPasswordInput.value, confirmPassword: this.confirmPasswordInput.value }), (e => { try { JSON.parse(e).success && (window.location.href = "/account") } catch (e) { console.log(e) } })) } sendSuccessInfo() { this.client.post("/cidaas/changepassword", JSON.stringify({ result: !0 }), (e => { window.location.href = "/account" })) } checkInputFields() { const e = this.newPasswordInput.value, t = this.oldPasswordInput.value, i = this.confirmPasswordInput.value; return !(e.length < 8) && (!(i.length < 8) && (!(t.length < 1) && e === i)) } } window.PluginManager.register("CidaasLogin", c, "[data-cidaas-login]"), window.PluginManager.register("CidaasInfo", m, "[data-cidaas-info]"), window.PluginManager.register("CidaasEmailChange", y, "[data-cidaas-email-change]"), window.PluginManager.register("CidaasPassword", g, "[data-cidaas-password]") } }, e => { e.O(0, ["vendor-node", "vendor-shared"], (() => { return t = 2065, e(e.s = t); var t })); e.O() }]);